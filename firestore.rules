
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      // Ensure request.auth is not null before trying to access uid
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    // Helper function to check if the requesting user is a system-admin
    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    // Helper function to check if the requesting user is a user-admin
    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    // Helper function to check if the requesting user is a regular user
    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    // Helper function to check if the requesting user belongs to a specific organization
    function belongsToOrg(orgId) {
      let userData = getUserData();
      return userData != null && userData.organizationId == orgId;
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      return resource.data;
    }

    match /users/{userId} {
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email &&
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null &&
                       incomingData().createdBy == request.auth.uid
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdmin() &&
                       incomingData().organizationId == getUserData().organizationId &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid
                      )
                    );
      allow list: if isSystemAdmin() || (isUserAdmin() && request.query.limit <= 10); // Example: user-admins can list users in their org
      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(existingData().organizationId))
                    );
      allow update: if request.auth != null && (
                      (isOwner(userId) &&
                       incomingData().organizationId == existingData().organizationId &&
                       incomingData().role == existingData().role // Prevent self-role/org change
                      ) ||
                      isSystemAdmin() ||
                      (isUserAdmin() &&
                       belongsToOrg(existingData().organizationId) && // target user is in their org
                       incomingData().organizationId == existingData().organizationId && // cannot change target user's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin')
                      )
                    );
      allow delete: if request.auth != null && (
                       isSystemAdmin() ||
                       (isUserAdmin() && belongsToOrg(existingData().organizationId) && userId != request.auth.uid)
                     );
    }

    match /organizations/{orgId} {
      allow create: if (
                      (request.auth != null && incomingData().approved == false && incomingData().createdAt is timestamp) ||
                      isSystemAdmin()
                    );
      allow list: if request.auth != null && isSystemAdmin();
      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      belongsToOrg(orgId)
                    );
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(orgId))
                    );
      allow delete: if isSystemAdmin();
    }

    match /groups/{groupId} {
      function groupOrgId() {
        return resource != null ? existingData().orgId : incomingData().orgId;
      }
      allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(groupOrgId()));
      allow create, update, delete: if request.auth != null && (
                                      isSystemAdmin() ||
                                      (isUserAdmin() && belongsToOrg(groupOrgId()))
                                    );
    }

    match /configurations/{configId} {
       function configCameraOrgId() {
         let sourceDoc;
         if (resource != null && existingData().sourceType == 'camera') {
           sourceDoc = get(/databases/$(database)/documents/cameras/$(existingData().sourceId));
         } else if (request.resource != null && incomingData().sourceType == 'camera') {
           sourceDoc = get(/databases/$(database)/documents/cameras/$(incomingData().sourceId));
         } else if (resource != null && existingData().sourceType == 'video') {
            sourceDoc = get(/databases/$(database)/documents/videos/$(existingData().sourceId));
         } else if (request.resource != null && incomingData().sourceType == 'video') {
            sourceDoc = get(/databases/$(database)/documents/videos/$(incomingData().sourceId));
         }
         return sourceDoc.exists ? sourceDoc.data.orgId : null;
       }
       allow read, list: if request.auth != null && (isSystemAdmin() || (configCameraOrgId() != null && belongsToOrg(configCameraOrgId())));
       allow create, update, delete: if request.auth != null && (
                                       isSystemAdmin() ||
                                       (configCameraOrgId() != null && isUserAdmin() && belongsToOrg(configCameraOrgId()))
                                     );
    }

     match /cameras/{cameraId} {
        function cameraOrgId() {
          return resource != null ? existingData().orgId : incomingData().orgId;
        }
        allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(cameraOrgId()));
        allow create, update, delete: if request.auth != null && (
                                        isSystemAdmin() ||
                                        (isUserAdmin() && belongsToOrg(cameraOrgId()))
                                      );
     }

     match /videos/{videoId} { // Basic rule for videos, refine as needed
        function videoOrgId() {
          return resource != null ? existingData().orgId : incomingData().orgId;
        }
        allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(videoOrgId()));
        allow create, update, delete: if request.auth != null && (
                                        isSystemAdmin() ||
                                        (isUserAdmin() && belongsToOrg(videoOrgId()))
                                      );
     }
     
     match /servers/{serverId} {
        allow read, list, create, update, delete: if request.auth != null && isSystemAdmin();
     }

    // Explicitly deny access to any other path if not system admin
    // match /{path=**} {
    // allow read, write: if false; // Default deny unless overridden above or by system-admin below
    // }
  }
}
