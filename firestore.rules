
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      // Ensure request.auth is not null before trying to access uid
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    // Helper function to check if the requesting user is a system-admin
    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    // Helper function to check if the requesting user is a user-admin
    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    // Helper function to check if the requesting user is a regular user
    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    // Helper function to check if the requesting user belongs to a specific organization
    function belongsToOrg(orgId) {
      let userData = getUserData();
      return userData != null && userData.organizationId == orgId;
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      // Check if resource is null before accessing its data property
      return resource != null && resource.data != null ? resource.data : null;
    }

    match /users/{userId} {
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email &&
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null &&
                       incomingData().createdBy == request.auth.uid
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdmin() &&
                       incomingData().organizationId == getUserData().organizationId &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid
                      )
                    );

      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && existingData() != null && belongsToOrg(existingData().organizationId))
                    );

      allow update: if request.auth != null && (
                      (isOwner(userId) &&
                       existingData() != null &&
                       incomingData().organizationId == existingData().organizationId &&
                       incomingData().role == existingData().role // Prevent self-role/org change
                      ) ||
                      isSystemAdmin() ||
                      (isUserAdmin() &&
                       existingData() != null &&
                       belongsToOrg(existingData().organizationId) && // target user is in their org
                       incomingData().organizationId == existingData().organizationId && // cannot change target user's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin')
                      )
                    );

      allow delete: if request.auth != null && (
                       isSystemAdmin() ||
                       (isUserAdmin() && existingData() != null && belongsToOrg(existingData().organizationId) && userId != request.auth.uid)
                     );
    }

    match /organizations/{orgId} {
      allow create: if (
                      (request.auth != null && incomingData().approved == false && incomingData().createdAt is timestamp) ||
                      isSystemAdmin()
                    );
      allow list: if request.auth != null && isSystemAdmin(); // Explicit list permission for system admins
      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      belongsToOrg(orgId)
                    );
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(orgId))
                    );
      allow delete: if request.auth != null && isSystemAdmin();
    }

    match /groups/{groupId} {
      allow create: if request.auth != null && (
                        (isUserAdmin() && incomingData().orgId == getUserData().organizationId) ||
                        isSystemAdmin()
                      );
      allow read, update, delete: if request.auth != null && (
                                    isSystemAdmin() ||
                                    (existingData() != null && belongsToOrg(existingData().orgId))
                                  );
      allow list: if request.auth != null && isSystemAdmin(); // Or more granular if needed
    }

    match /camera_configurations/{configId} {
       allow create: if request.auth != null &&
                        incomingData().userId == request.auth.uid &&
                        incomingData().sourceId != null &&
                        incomingData().sourceType == 'camera' && // Assuming camera for now
                        getUserData().organizationId != null && // User must belong to an org
                        get(/databases/$(database)/documents/cameras/$(incomingData().sourceId)).data.orgId == getUserData().organizationId;

       allow read, update, delete: if request.auth != null && (
                                isSystemAdmin() ||
                                (existingData() != null &&
                                 get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == getUserData().organizationId
                                )
                              );
        allow list: if request.auth != null && isSystemAdmin(); // Or more granular
    }

     match /cameras/{cameraId} {
        allow create: if request.auth != null &&
                         incomingData().userId == request.auth.uid &&
                         incomingData().orgId == getUserData().organizationId &&
                         incomingData().processingStatus == "waiting_for_approval" &&
                         incomingData().currentConfigId != null;

        allow read, update, delete: if request.auth != null && (
                                isSystemAdmin() ||
                                (existingData() != null && belongsToOrg(existingData().orgId))
                              );
        allow list: if request.auth != null && isSystemAdmin(); // Or more granular
     }

     match /videos/{videoId} { // Basic rules, refine as needed
        allow create: if request.auth != null &&
                         incomingData().userId == request.auth.uid &&
                         incomingData().orgId == getUserData().organizationId;
        allow read, update, delete: if request.auth != null && (
                                isSystemAdmin() ||
                                (existingData() != null && belongsToOrg(existingData().orgId))
                              );
        allow list: if request.auth != null && isSystemAdmin();
     }

     match /servers/{serverId} {
        allow read, list, create, update, delete: if request.auth != null && isSystemAdmin();
     }
  }
}

    