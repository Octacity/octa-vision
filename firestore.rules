
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the user's role and organizationId
    function getUserData() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }
    function userOrgId() {
      let userData = getUserData();
      return userData != null ? userData.organizationId : null;
    }
    function userRole() {
      let userData = getUserData();
      return userData != null ? userData.role : null;
    }

    // Helper function to check if the user is a system-admin
    function isSystemAdmin() {
      return userRole() == 'system-admin';
    }

    // Helper function to check if the user is a user-admin for a specific org
    function isUserAdminForOrg(orgId) {
      return userRole() == 'user-admin' && userOrgId() == orgId;
    }
     // Helper function to check if the user is just a user for a specific org
    function isUserForOrg(orgId) {
      return userRole() == 'user' && userOrgId() == orgId;
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      return resource.data;
    }

    // USERS Collection
    match /users/{userId} {
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email &&
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null && // Org ID must be provided for new org
                       incomingData().createdBy == request.auth.uid
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdminForOrg(incomingData().organizationId) &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid
                      )
                    );
      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdminForOrg(existingData().organizationId)) // user-admin can read users in their org
                    );
      allow update: if request.auth != null && (
                      // User updating their own non-critical fields
                      (isOwner(userId) &&
                       incomingData().organizationId == existingData().organizationId && // Cannot change org
                       incomingData().role == existingData().role // Cannot change own role via this
                      ) ||
                      isSystemAdmin() ||
                      // User-admin updating users in their org
                      (isUserAdminForOrg(existingData().organizationId) &&
                       incomingData().organizationId == existingData().organizationId && // Cannot change target's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') // Can change role within user/user-admin
                      )
                    );
      allow delete: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdminForOrg(existingData().organizationId) && userId != request.auth.uid) // user-admin can delete users in their org (not self)
                     );
    }

    // ORGANIZATIONS Collection
    match /organizations/{orgId} {
      allow create: if (request.auth != null &&
                        incomingData().approved == false &&
                        incomingData().admin == false && // New orgs by users cannot be admin orgs
                        incomingData().createdAt is timestamp); // Enforce createdAt
                        // Org ID is auto-generated by Firestore on client-side addDoc

      allow read: if request.auth != null && (isSystemAdmin() || userOrgId() == orgId); // System admin or member of the org
      allow list: if request.auth != null && isSystemAdmin(); // Only system admin can list all orgs
      allow update: if request.auth != null && (isSystemAdmin() || isUserAdminForOrg(orgId)); // System admin or user-admin of that org
      allow delete: if request.auth != null && isSystemAdmin(); // Only system admin can delete orgs
    }

    // GROUPS Collection
    match /groups/{groupId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId();
      allow read: if request.auth != null && (isSystemAdmin() || (existingData() != null && userOrgId() == existingData().orgId));
      allow update: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId)) && // Creator or user-admin of org
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['updatedAt', 'cameras', 'videos', 'name', 'defaultCameraSceneContext', 'defaultAiDetectionTarget', 'defaultAlertEvents', 'defaultVideoChunks', 'defaultNumFrames', 'defaultVideoOverlap'])
                        )
                      );
      allow delete: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId)) // Creator or user-admin of org
                        )
                      );
    }

    // CONFIGURATIONS Collection (singular 'configurations')
    match /configurations/{configId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().sourceId != null &&
                       incomingData().sourceType != null &&
                       (incomingData().sourceType == "camera" || incomingData().sourceType == "video") &&
                       ( // Check organization of the source camera or video
                         (incomingData().sourceType == "camera" && get(/databases/$(database)/documents/cameras/$(incomingData().sourceId)).data.orgId == userOrgId()) ||
                         (incomingData().sourceType == "video" && get(/databases/$(database)/documents/videos/$(incomingData().sourceId)).data.orgId == userOrgId())
                       ) &&
                       (incomingData().serverIpAddress == null || incomingData().serverIpAddress is string); // serverIp can be null or string

      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      (existingData() != null && // Check if the config document itself exists
                        (
                          (existingData().sourceType == "camera" && get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId()) ||
                          (existingData().sourceType == "video" && get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId == userOrgId())
                        )
                      )
                    );
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (existingData() != null && // Check if the config document itself exists
                        (
                          (existingData().sourceType == "camera" && get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId()) ||
                          (existingData().sourceType == "video" && get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId == userOrgId())
                        ) &&
                        (incomingData().userId == request.auth.uid || isUserAdminForOrg(userOrgId())) // Creator or user-admin of org
                      )
                    );
      allow delete: if request.auth != null && (
                      isSystemAdmin() ||
                      (existingData() != null && // Check if the config document itself exists
                        (
                          (existingData().sourceType == "camera" && get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId()) ||
                          (existingData().sourceType == "video" && get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId == userOrgId())
                        ) &&
                        (incomingData().userId == request.auth.uid || isUserAdminForOrg(userOrgId())) // Creator or user-admin of org
                      )
                    );
    }

    // CAMERAS Collection
    match /cameras/{cameraId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId() &&
                       incomingData().processingStatus == "waiting_for_approval" &&
                       incomingData().currentConfigId != null; // Config ID is set on client
      allow read: if request.auth != null && (isSystemAdmin() || (existingData() != null && userOrgId() == existingData().orgId));
      allow update: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId)) // Creator or user-admin of org
                        )
                      );
      allow delete: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId)) // Creator or user-admin of org
                        )
                      );
    }

    // VIDEOS Collection (Basic placeholder, refine as needed)
    match /videos/{videoId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId();
      allow read: if request.auth != null && (isSystemAdmin() || (existingData() != null && userOrgId() == existingData().orgId));
      allow update: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId))
                        )
                      );
      allow delete: if request.auth != null && (
                        isSystemAdmin() ||
                        (existingData() != null && userOrgId() == existingData().orgId &&
                         (incomingData().userId == existingData().userId || isUserAdminForOrg(existingData().orgId))
                        )
                      );
    }

    // SERVERS Collection
    match /servers/{serverId} {
      allow read, list, write, delete: if request.auth != null && isSystemAdmin(); // Only system admins
    }
  }
}
