
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    // Helper function to get the user's organization ID
    function userOrgId() {
      let userData = getUserData();
      return userData != null ? userData.organizationId : null;
    }

    // Helper function to check if the requesting user is a system-admin
    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    // Helper function to check if the requesting user is a user-admin
    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    // Helper function to check if the requesting user is a regular user
    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      return resource.data;
    }

    // USERS
    match /users/{userId} {
      allow create: if (
                      // Initial signup by user themselves (creating their own user-admin record for a new org)
                      request.auth != null &&
                      incomingData().email == request.auth.token.email && // Email must match token
                      incomingData().role == 'user-admin' &&
                      incomingData().organizationId != null && // Org ID must be provided
                      incomingData().createdBy == request.auth.uid && // Creator must be self
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp
                    ) ||
                    (
                      // System admin creating any user
                      isSystemAdmin() &&
                      (incomingData().role == 'user-admin' || incomingData().role == 'user' || incomingData().role == 'system-admin') &&
                      incomingData().organizationId != null && // orgId is required, except maybe for a new system-admin without an org initially
                      incomingData().createdBy == request.auth.uid &&
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp
                    ) ||
                    (
                      // User-admin creating user/user-admin for their org
                      isUserAdmin() &&
                      incomingData().organizationId == userOrgId() &&
                      (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                      incomingData().createdBy == request.auth.uid &&
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp
                    );

      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && existingData().organizationId == userOrgId())
                    );

      allow update: if request.auth != null && (
                      ( // Owner can update their own info (except role and orgId)
                        isOwner(userId) &&
                        incomingData().organizationId == existingData().organizationId && // Cannot change org
                        incomingData().role == existingData().role // Cannot change own role (user-admin can change others)
                      ) ||
                      isSystemAdmin() || // System admin can update anything
                      ( // User-admin can update users in their org
                        isUserAdmin() &&
                        existingData().organizationId == userOrgId() &&
                        incomingData().organizationId == existingData().organizationId && // Cannot change target user's org
                        (incomingData().role == 'user' || incomingData().role == 'user-admin') // Can set to user or user-admin
                      )
                    );
      allow delete: if request.auth != null && (
                       isSystemAdmin() && userId != request.auth.uid || // System admin can delete anyone but not themselves this way
                       (isUserAdmin() && existingData().organizationId == userOrgId() && userId != request.auth.uid) // User-admin can delete users in their org (not themselves)
                     );
    }

    // ORGANIZATIONS
    match /organizations/{orgId} {
      allow create: if (
                      // Initial signup creating an organization
                      request.auth != null &&
                      incomingData().approved == false &&
                      incomingData().admin == false && // New orgs are not platform admin orgs
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp
                      // Further checks can be added, e.g., user creating this org is becoming its user-admin
                    ) ||
                    (
                      // System admin creating an organization
                      isSystemAdmin()
                    );
      allow list: if request.auth != null && isSystemAdmin(); // Only system admins can list all orgs
      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      (userOrgId() == orgId) // User can read their own org details
                    );
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && userOrgId() == orgId) // User-admin can update their own org
                    );
      allow delete: if isSystemAdmin(); // Only system admin can delete orgs
    }

    // GROUPS
    match /groups/{groupId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId() &&
                       incomingData().createdAt is timestamp &&
                       incomingData().updatedAt is timestamp;
      allow read: if request.auth != null &&
                     (isSystemAdmin() || (existingData().orgId == userOrgId()));
      allow update: if request.auth != null &&
                       (isSystemAdmin() ||
                        (existingData().orgId == userOrgId() &&
                         (isUserAdmin() || existingData().userId == request.auth.uid) && // Creator or user-admin of org
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'updatedAt', 'cameras', 'videos', 'defaultCameraSceneContext', 'defaultAiDetectionTarget', 'defaultAlertEvents', 'defaultVideoChunks', 'defaultNumFrames', 'defaultVideoOverlap'])
                        )
                       );
      allow delete: if request.auth != null &&
                       (isSystemAdmin() || (existingData().orgId == userOrgId() && isUserAdmin()));
    }

    // CAMERAS
    match /cameras/{cameraId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId() &&
                       incomingData().processingStatus == "waiting_for_approval" &&
                       incomingData().currentConfigId != null && // Config ID is assigned client-side in batch
                       incomingData().activeVSSId == null && // Not active on creation
                       incomingData().createdAt is timestamp &&
                       incomingData().updatedAt is timestamp;
      allow read: if request.auth != null &&
                     (isSystemAdmin() || (existingData().orgId == userOrgId()));
      allow update: if request.auth != null &&
                       (isSystemAdmin() ||
                        (existingData().orgId == userOrgId() &&
                         (isUserAdmin() || existingData().userId == request.auth.uid)
                        )
                       ); // More granular control over updatable fields can be added
      allow delete: if request.auth != null &&
                       (isSystemAdmin() || (existingData().orgId == userOrgId() && isUserAdmin()));
    }

    // CAMERA CONFIGURATIONS
    match /camera_configurations/{configId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().sourceType == "camera" && // Ensure it's for a camera
                       incomingData().sourceId != null && // Camera ID must be provided
                       incomingData().serverIpAddress == null && // Not assigned by user initially
                       incomingData().createdAt is timestamp &&
                       // Ensure user belongs to an org; camera's org ownership is checked at /cameras create
                       userOrgId() != null;

      allow read: if request.auth != null &&
                     (isSystemAdmin() ||
                       ( // User can read configs if they belong to the camera's org
                         // This get is on an existing camera doc, which is fine for reads
                         exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) &&
                         get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId()
                       )
                     );
      allow update: if request.auth != null &&
                       (isSystemAdmin() ||
                         ( // User can update configs if they belong to the camera's org
                           exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) &&
                           get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId() &&
                           (isUserAdmin() || existingData().userId == request.auth.uid)
                         )
                       );
      allow delete: if request.auth != null &&
                       (isSystemAdmin() ||
                         ( // User can delete configs if they belong to the camera's org and are admin/creator
                           exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) &&
                           get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId() &&
                           (isUserAdmin() || existingData().userId == request.auth.uid)
                         )
                       );
    }

    // VIDEOS (Basic rules, can be expanded)
    match /videos/{videoId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId();
      allow read: if request.auth != null &&
                     (isSystemAdmin() || (existingData().orgId == userOrgId()));
      allow update: if request.auth != null &&
                       (isSystemAdmin() ||
                        (existingData().orgId == userOrgId() &&
                         (isUserAdmin() || existingData().userId == request.auth.uid)
                        )
                       );
      allow delete: if request.auth != null &&
                       (isSystemAdmin() || (existingData().orgId == userOrgId() && isUserAdmin()));
    }

    // CONFIGURATIONS (Generic for videos, can be merged or refined with camera_configurations logic if very similar)
    // This assumes 'configurations' collection will also handle video configs.
    // If camera_configurations is exclusively for cameras, you'll need specific rules for video configs.
    match /configurations/{configId} { // Using 'configurations' as per earlier discussion
       allow read, write: if request.auth != null && (
                            isSystemAdmin() ||
                            ( // User can manage configs if they belong to the source's org
                              (existingData().sourceType == "camera" &&
                               exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) &&
                               get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId == userOrgId()
                              ) ||
                              (existingData().sourceType == "video" &&
                               exists(/databases/$(database)/documents/videos/$(existingData().sourceId)) &&
                               get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId == userOrgId()
                              ) ||
                              // For create operations
                              (request.resource != null && incomingData().sourceType == "camera" &&
                               userOrgId() != null // Implicitly, camera will be created in user's org
                              ) ||
                              (request.resource != null && incomingData().sourceType == "video" &&
                               userOrgId() != null // Implicitly, video will be created in user's org
                              )
                            )
                          );
    }

    // SERVERS (System Admin only)
    match /servers/{serverId} {
      allow read, list, write, delete: if request.auth != null && isSystemAdmin();
    }
  }
}

    