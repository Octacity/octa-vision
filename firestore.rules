
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }
    function userOrgId(){
      let userData = getUserData();
      return userData != null ? userData.organizationId : null;
    }

    // Helper function to check if the requesting user is a system-admin
    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    // Helper function to check if the requesting user is a user-admin
    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    // Helper function to check if the requesting user is a regular user
    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    // Helper function to check if the requesting user belongs to a specific organization
    function belongsToOrg(orgId) {
      return userOrgId() == orgId;
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      return resource.data;
    }

    match /users/{userId} {
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email &&
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null &&
                       incomingData().createdBy == request.auth.uid
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdmin() &&
                       incomingData().organizationId == userOrgId() &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid
                      )
                    );

      allow list: if request.auth != null && (isSystemAdmin() || isUserAdmin());
      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(existingData().organizationId))
                    );

      allow update: if request.auth != null && (
                      (isOwner(userId) &&
                       incomingData().organizationId == existingData().organizationId && // User cannot change their own org
                       ( (isUserAdmin() && (incomingData().role == 'user-admin' || incomingData().role == 'user')) || // User admin can change their role to user or user-admin
                         (isUser() && incomingData().role == existingData().role) // Regular user cannot change their role
                       )
                      ) ||
                      isSystemAdmin() ||
                      (isUserAdmin() &&
                       belongsToOrg(existingData().organizationId) && // target user is in their org
                       incomingData().organizationId == existingData().organizationId && // cannot change target user's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') // can change role of others in org
                      )
                    );

      allow delete: if request.auth != null && (
                       isSystemAdmin() ||
                       (isUserAdmin() && belongsToOrg(existingData().organizationId) && userId != request.auth.uid) // User-admin can delete others in org
                     );
    }

    match /organizations/{orgId} {
      allow create: if (
                      (request.auth != null &&
                       incomingData().approved == false &&
                       incomingData().admin == false && // New orgs via signup are not admin orgs
                       incomingData().createdAt is timestamp)
                    ) || isSystemAdmin(); // System admin can create any org

      allow list: if request.auth != null && isSystemAdmin(); // Only system admins can list all orgs
      allow read: if request.auth != null && (isSystemAdmin() || belongsToOrg(orgId));
      allow update: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(orgId)));
      allow delete: if request.auth != null && isSystemAdmin();
    }

    match /groups/{groupId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().orgId == userOrgId();
      allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(existingData().orgId));
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(existingData().orgId) && incomingData().orgId == existingData().orgId)
                    );
      allow delete: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(existingData().orgId)));
    }

    match /camera_configurations/{configId} {
      allow create: if request.auth != null &&
                       incomingData().userId == request.auth.uid &&
                       incomingData().sourceType == "camera" && // Ensure correct source type for camera configs
                       incomingData().sourceId != null &&
                       (incomingData().serverIpAddress == null || incomingData().serverIpAddress is string) && // serverIp can be null or a string
                       userOrgId() != null; // User must belong to an org to create a config indirectly tied to an org via camera
                       // (Org ownership is checked when creating the camera itself)

      allow read, list: if request.auth != null && (
                            isSystemAdmin() ||
                            (userOrgId() != null && // Basic check: user belongs to an org
                             resource != null && resource.data != null && resource.data.sourceId != null && // Ensure sourceId exists
                             exists(/databases/$(database)/documents/cameras/$(resource.data.sourceId)) && // Ensure camera exists
                             belongsToOrg(get(/databases/$(database)/documents/cameras/$(resource.data.sourceId)).data.orgId) // User belongs to camera's org
                            )
                          );
      allow update: if request.auth != null && (
                            isSystemAdmin() ||
                            (userOrgId() != null && resource != null && resource.data != null && resource.data.sourceId != null &&
                             exists(/databases/$(database)/documents/cameras/$(resource.data.sourceId)) &&
                             belongsToOrg(get(/databases/$(database)/documents/cameras/$(resource.data.sourceId)).data.orgId) &&
                             incomingData().sourceId == existingData().sourceId && // Cannot change the camera it points to
                             incomingData().sourceType == existingData().sourceType // Cannot change source type
                            )
                          );
      allow delete: if request.auth != null && (
                            isSystemAdmin() ||
                            (userOrgId() != null && resource != null && resource.data != null && resource.data.sourceId != null &&
                             exists(/databases/$(database)/documents/cameras/$(resource.data.sourceId)) &&
                             belongsToOrg(get(/databases/$(database)/documents/cameras/$(resource.data.sourceId)).data.orgId)
                            )
                          );
    }

     match /cameras/{cameraId} {
        allow create: if request.auth != null &&
                         incomingData().userId == request.auth.uid &&
                         incomingData().orgId == userOrgId() &&
                         incomingData().processingStatus == "waiting_for_approval" &&
                         incomingData().currentConfigId != null; // Config ID must be set on create

        allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(existingData().orgId));
        allow update: if request.auth != null && (
                          isSystemAdmin() ||
                          (belongsToOrg(existingData().orgId) && incomingData().orgId == existingData().orgId) // Cannot change orgId
                        );
        allow delete: if request.auth != null && (isSystemAdmin() || belongsToOrg(existingData().orgId));
     }

     match /videos/{videoId} {
        // Define rules for videos similar to cameras, adjusting for video-specific fields/logic
        // Example:
        allow create: if request.auth != null && incomingData().userId == request.auth.uid && incomingData().orgId == userOrgId();
        allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(existingData().orgId));
        allow update: if request.auth != null && (isSystemAdmin() || (belongsToOrg(existingData().orgId) && incomingData().orgId == existingData().orgId));
        allow delete: if request.auth != null && (isSystemAdmin() || belongsToOrg(existingData().orgId));
     }

     match /servers/{serverId} {
       allow read, list, create, update, delete: if request.auth != null && isSystemAdmin();
     }

    // No overly broad fallback match. All collections should have explicit rules.
  }
}
