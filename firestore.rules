
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    function belongsToOrg(orgId) {
      let userData = getUserData();
      return userData != null && userData.organizationId == orgId;
    }

    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function incomingData() {
      return request.resource.data;
    }

    function existingData() {
      return resource.data;
    }

    match /users/{userId} {
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email &&
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null && // orgId is for the new org being created
                       incomingData().createdBy == request.auth.uid && // User creating their own initial record
                       incomingData().createdAt is timestamp &&
                       incomingData().updatedAt is timestamp
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdmin() &&
                       incomingData().organizationId == getUserData().organizationId &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid &&
                       incomingData().createdAt is timestamp &&
                       incomingData().updatedAt is timestamp
                      )
                    );

      allow list: if isSystemAdmin() || isUserAdmin(); // User admins can list users in their org (refined below)
      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(existingData().organizationId)) // User admin can read users in their org
                    );

      allow update: if request.auth != null && (
                      (isOwner(userId) &&
                       incomingData().organizationId == existingData().organizationId && // Cannot change own org
                       // Allow self-update of role only if not demoting self from last admin or if system-admin
                       (incomingData().role == existingData().role || isSystemAdmin() ) &&
                       !('organizationId' in incomingData().diff(existingData()).affectedKeys()) && // More robust check
                       !('role' in incomingData().diff(existingData()).affectedKeys() && existingData().role == 'user-admin' && incomingData().role != 'user-admin' && getUserData().uid == userId && !isSystemAdmin()) // prevent self-demotion from last admin
                      ) ||
                      isSystemAdmin() ||
                      (isUserAdmin() &&
                       belongsToOrg(existingData().organizationId) && // target user is in their org
                       incomingData().organizationId == existingData().organizationId && // cannot change target user's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') // Can set to user or user-admin
                      )
                    );

      allow delete: if request.auth != null && (
                       isSystemAdmin() ||
                       (isUserAdmin() && belongsToOrg(existingData().organizationId) && userId != request.auth.uid) // User-admin can delete users in their org, not themselves
                     );
    }

    match /organizations/{orgId} {
      allow create: if (
                      (request.auth != null && // Authenticated user creating for initial signup
                       incomingData().approved == false &&
                       incomingData().admin == false && // New orgs by users are not admin orgs
                       incomingData().createdAt is timestamp &&
                       incomingData().updatedAt is timestamp
                       // The user creating this org will be linked via the users collection
                      ) ||
                      isSystemAdmin() // System admin can create any org
                    );
      allow list: if request.auth != null && isSystemAdmin();
      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      belongsToOrg(orgId) // Members of the org can read their org details
                    );
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(orgId)) // User-admin of the org can update
                    );
      allow delete: if request.auth != null && isSystemAdmin();
    }

    match /groups/{groupId} {
      allow create: if request.auth != null &&
                      incomingData().userId == request.auth.uid && // User creating it is the owner
                      incomingData().orgId == getUserData().organizationId && // Belongs to user's organization
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp;

      allow read: if request.auth != null && (
                    isSystemAdmin() ||
                    (resource != null && belongsToOrg(existingData().orgId))
                  );
      allow list: if request.auth != null && (
                    isSystemAdmin() ||
                    isUserAdmin() // User admins can list groups within their org (filter on client)
                  );
      allow update: if request.auth != null &&
                      resource != null && // Ensure document exists for update
                      (
                        isSystemAdmin() ||
                        ( // User-admin of the group's org can update specified fields
                          isUserAdmin() &&
                          belongsToOrg(existingData().orgId) &&
                          incomingData().orgId == existingData().orgId && // orgId cannot change
                          incomingData().userId == existingData().userId && // owner cannot change
                          (request.resource.data.diff(existingData()).affectedKeys().hasOnly(['name', 'cameras', 'videos', 'updatedAt', 'defaultCameraSceneContext', 'defaultAiDetectionTarget', 'defaultAlertEvents', 'defaultVideoChunks', 'defaultNumFrames', 'defaultVideoOverlap']))
                        )
                      );
      allow delete: if request.auth != null &&
                      resource != null && // Ensure document exists for delete
                      (
                        isSystemAdmin() ||
                        (isUserAdmin() && belongsToOrg(existingData().orgId)) // User-admin of the org can delete
                      );
    }

    match /cameras/{cameraId} {
      // For batched writes: `create` rules must not depend on `get()` for docs in the same batch.
      allow create: if request.auth != null &&
                      incomingData().userId == request.auth.uid && // User creating it is the owner
                      incomingData().orgId == getUserData().organizationId && // Camera's orgId must match user's orgId
                      incomingData().processingStatus == "waiting_for_approval" &&
                      incomingData().currentConfigId != null && // This ID will be for a config created in the same batch
                      incomingData().protocol == "rtsp" &&
                      incomingData().activeVSSId == null &&
                      (incomingData().historicalVSSIds == null || (incomingData().historicalVSSIds is list && size(incomingData().historicalVSSIds) == 0)) &&
                      incomingData().createdAt is timestamp &&
                      incomingData().updatedAt is timestamp;

      allow read: if request.auth != null && (
                    isSystemAdmin() ||
                    (resource != null && belongsToOrg(existingData().orgId))
                  );
      allow list: if request.auth != null && (
                    isSystemAdmin() ||
                    isUserAdmin() // User admins can list cameras in their org (filter on client)
                  );
      allow update: if request.auth != null &&
                      resource != null && // Ensure document exists for update
                      (
                        isSystemAdmin() ||
                        (belongsToOrg(existingData().orgId) && // User belongs to the camera's org
                         incomingData().orgId == existingData().orgId && // Cannot change orgId
                         // Allow specific fields to be updated by org members (e.g., user-admin)
                         (request.resource.data.diff(existingData()).affectedKeys().hasOnly(['cameraName', 'groupId', 'url', 'protocol', 'currentConfigId', 'processingStatus', 'updatedAt']))
                        )
                      );
      allow delete: if request.auth != null &&
                      resource != null && // Ensure document exists for delete
                      (
                        isSystemAdmin() ||
                        (isUserAdmin() && belongsToOrg(existingData().orgId)) // User-admin of the org can delete
                      );
    }

    match /camera_configurations/{configId} {
      // For batched writes: `create` rules must not depend on `get()` for docs in the same batch.
      allow create: if request.auth != null &&
                      incomingData().userId == request.auth.uid && // Config created by the logged-in user
                      incomingData().sourceId != null && // Must link to a source (camera/video)
                      incomingData().sourceType != null && // Must specify source type
                      incomingData().serverIpAddress == null && // Server IP set by admin later
                      incomingData().previousConfigId == null && // First config for a source
                      incomingData().createdAt is timestamp;

      allow read: if request.auth != null && (
                    isSystemAdmin() ||
                    (resource != null && // Check if doc exists for read
                      // Allow if user belongs to the org of the camera/video this config is for
                      (
                        (existingData().sourceType == "camera" && exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) && belongsToOrg(get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId) ) ||
                        (existingData().sourceType == "video" && exists(/databases/$(database)/documents/videos/$(existingData().sourceId)) && belongsToOrg(get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId) )
                      )
                    )
                  );
      allow list: if request.auth != null && ( // Be cautious with list, might need client-side filtering by org
                    isSystemAdmin() || isUserAdmin() // User admins can list configs (should be filtered client-side)
                  );

      // Allow update by system admin or user of the org of the source
      allow update: if request.auth != null && resource != null && (
                      isSystemAdmin() ||
                      (
                        (existingData().sourceType == "camera" && exists(/databases/$(database)/documents/cameras/$(existingData().sourceId)) && belongsToOrg(get(/databases/$(database)/documents/cameras/$(existingData().sourceId)).data.orgId) && incomingData().userId == request.auth.uid ) ||
                        (existingData().sourceType == "video" && exists(/databases/$(database)/documents/videos/$(existingData().sourceId)) && belongsToOrg(get(/databases/$(database)/documents/videos/$(existingData().sourceId)).data.orgId) && incomingData().userId == request.auth.uid )
                      )
                    );
      allow delete: if request.auth != null && resource != null && isSystemAdmin(); // Only system admin can delete configs for now
    }

    match /videos/{videoId} { // Basic rules for videos, refine as needed
        allow create: if request.auth != null &&
                        incomingData().userId == request.auth.uid &&
                        incomingData().orgId == getUserData().organizationId &&
                        incomingData().processingStatus == "pending_upload" && // Example initial status
                        incomingData().createdAt is timestamp &&
                        incomingData().updatedAt is timestamp;

        allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      (resource != null && belongsToOrg(existingData().orgId))
                    );
        allow list: if request.auth != null && (
                      isSystemAdmin() ||
                      isUserAdmin() // User admins can list videos in their org (filter on client)
                    );
        allow update: if request.auth != null &&
                        resource != null &&
                        (
                          isSystemAdmin() ||
                          (belongsToOrg(existingData().orgId) &&
                           incomingData().orgId == existingData().orgId &&
                           (request.resource.data.diff(existingData()).affectedKeys().hasOnly(['videoName', 'groupId', 'currentConfigId', 'processingStatus', 'updatedAt', 'thumbnailUrl']))
                          )
                        );
        allow delete: if request.auth != null &&
                        resource != null &&
                        (
                          isSystemAdmin() ||
                          (isUserAdmin() && belongsToOrg(existingData().orgId))
                        );
    }

    match /servers/{serverId} {
      allow read, list, create, update, delete: if request.auth != null && isSystemAdmin();
    }
  }
}

    