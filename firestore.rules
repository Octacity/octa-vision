
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to get the requesting user's data from Firestore
    function getUserData() {
      // Ensure request.auth is not null before trying to access uid
      return request.auth != null ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data : null;
    }

    // Helper function to check if the requesting user is a system-admin
    function isSystemAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'system-admin';
    }

    // Helper function to check if the requesting user is a user-admin
    function isUserAdmin() {
      let userData = getUserData();
      return userData != null && userData.role == 'user-admin';
    }

    // Helper function to check if the requesting user is a regular user
    function isUser() {
      let userData = getUserData();
      return userData != null && userData.role == 'user';
    }

    // Helper function to check if the requesting user belongs to a specific organization
    // Takes orgId as a parameter.
    function belongsToOrg(orgId) {
      let userData = getUserData();
      return userData != null && userData.organizationId == orgId;
    }

    // Helper function to check if the user is trying to modify their own document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Data coming in with the request
    function incomingData() {
      return request.resource.data;
    }

    // Existing data in Firestore
    function existingData() {
      return resource.data;
    }

    match /users/{userId} {
      // Allow create if:
      // 1. It's a new user signing up (role 'user-admin', orgId provided for their new org, createdBy is self).
      // 2. A system-admin is creating any type of user.
      // 3. A user-admin is creating a 'user' or 'user-admin' for their OWN organization, and they are the creator.
      allow create: if (
                      // Initial signup: user-admin for a new org
                      (request.auth != null &&
                       incomingData().email == request.auth.token.email && // Ensure email matches token during signup
                       incomingData().role == 'user-admin' &&
                       incomingData().organizationId != null &&
                       incomingData().createdBy == request.auth.uid
                      ) ||
                      // System admin creating any user
                      isSystemAdmin() ||
                      // User-admin creating user/user-admin for their org
                      (isUserAdmin() &&
                       incomingData().organizationId == getUserData().organizationId &&
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') &&
                       incomingData().createdBy == request.auth.uid // User-admin must be the creator
                      )
                    );

      // Allow read if:
      // 1. The user is reading their own document.
      // 2. The user is a system-admin.
      // 3. The user is a user-admin and the document being read belongs to their organization.
      allow read: if request.auth != null && (
                      isOwner(userId) ||
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(existingData().organizationId))
                    );
      allow list: if request.auth != null && (isSystemAdmin() || isUserAdmin()); // User admins can list users in their org, system admins all

      // Allow update if:
      // 1. The user is updating their own document (but cannot change orgId or critical role aspects without admin).
      // 2. The user is a system-admin (can change anything).
      // 3. The user is a user-admin updating a user within their org (cannot change orgId, can change role to 'user' or 'user-admin').
      allow update: if request.auth != null && (
                      (isOwner(userId) &&
                       incomingData().organizationId == existingData().organizationId && // Cannot change own org
                       ( (existingData().role == 'system-admin' || existingData().role == 'user-admin') ? incomingData().role == existingData().role : true ) // Admins cannot change their own role to less privileged
                      ) ||
                      isSystemAdmin() ||
                      (isUserAdmin() &&
                       belongsToOrg(existingData().organizationId) && // target user is in their org
                       incomingData().organizationId == existingData().organizationId && // cannot change target user's org
                       (incomingData().role == 'user' || incomingData().role == 'user-admin') // can set to user or user-admin
                      )
                    );

      // Allow delete if system-admin or user-admin deleting from their org (and not themselves)
      allow delete: if request.auth != null && (
                       isSystemAdmin() ||
                       (isUserAdmin() && belongsToOrg(existingData().organizationId) && userId != request.auth.uid)
                     );
    }

    match /organizations/{orgId} {
      // Allow create if:
      // 1. It's a new organization being created during signup (approved is false, by an authenticated user).
      // 2. A system-admin is creating an organization.
      allow create: if (
                      (request.auth != null && incomingData().approved == false && incomingData().createdAt is timestamp) ||
                      isSystemAdmin()
                    );

      // Allow read if:
      // 1. The user is a system-admin.
      // 2. The user belongs to the organization (either user or user-admin).
      allow read: if request.auth != null && (
                      isSystemAdmin() ||
                      belongsToOrg(orgId)
                    );
      allow list: if request.auth != null && isSystemAdmin(); // Only system admins can list all orgs

      // Allow update if:
      // 1. The user is a system-admin.
      // 2. The user is a user-admin for that organization.
      allow update: if request.auth != null && (
                      isSystemAdmin() ||
                      (isUserAdmin() && belongsToOrg(orgId))
                    );

      // System admin can delete organizations
      allow delete: if request.auth != null && isSystemAdmin();
    }

    match /groups/{groupId} {
      function getOrgIdForGroup() {
        return request.method == 'create' ? incomingData().orgId : existingData().orgId;
      }
      allow create: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForGroup())));
      allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(getOrgIdForGroup()));
      allow update: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForGroup()) && incomingData().orgId == existingData().orgId ));
      allow delete: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForGroup())));
    }

    match /configurations/{configId} {
      // Helper to get the orgId of the source (camera/video) this configuration belongs to
      function getConfigOwningOrgId() {
        let sourceData = request.method == 'create' ? incomingData() : existingData();
        let docPathPrefix = /databases/$(database)/documents/;
        let sourcePath = sourceData.sourceType == 'camera' ? string(docPathPrefix) + 'cameras/' + string(sourceData.sourceId)
                                                          : string(docPathPrefix) + 'videos/' + string(sourceData.sourceId);
        // Check existence before get to avoid errors on list/non-existent doc reads
        return exists(path(sourcePath)) ? get(path(sourcePath)).data.orgId : null;
      }

      allow create: if request.auth != null && (
                        isSystemAdmin() ||
                        ( (isUserAdmin() || isUser()) && getConfigOwningOrgId() != null && belongsToOrg(getConfigOwningOrgId()) )
                      );
      allow read, list: if request.auth != null && (
                        isSystemAdmin() ||
                        ( getConfigOwningOrgId() != null && belongsToOrg(getConfigOwningOrgId()) )
                      );
      allow update: if request.auth != null && (
                        isSystemAdmin() ||
                        ( (isUserAdmin() || isUser()) && getConfigOwningOrgId() != null && belongsToOrg(getConfigOwningOrgId()) &&
                          incomingData().sourceId == existingData().sourceId &&
                          incomingData().sourceType == existingData().sourceType // Cannot change source association
                        )
                      );
      allow delete: if request.auth != null && (
                        isSystemAdmin() ||
                        ( isUserAdmin() && getConfigOwningOrgId() != null && belongsToOrg(getConfigOwningOrgId()) )
                      );
    }

    match /cameras/{cameraId} {
      function getOrgIdForCamera() {
        return request.method == 'create' ? incomingData().orgId : existingData().orgId;
      }
      allow create: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForCamera())));
      allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(getOrgIdForCamera()));
      allow update: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForCamera()) && incomingData().orgId == existingData().orgId ));
      allow delete: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForCamera())));
    }

    match /videos/{videoId} {
      function getOrgIdForVideo() {
        return request.method == 'create' ? incomingData().orgId : existingData().orgId;
      }
      allow create: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForVideo())));
      allow read, list: if request.auth != null && (isSystemAdmin() || belongsToOrg(getOrgIdForVideo()));
      allow update: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForVideo()) && incomingData().orgId == existingData().orgId ));
      allow delete: if request.auth != null && (isSystemAdmin() || (isUserAdmin() && belongsToOrg(getOrgIdForVideo())));
    }

    match /servers/{serverId} {
      // Only system admins can manage servers
      allow read, write, list, create, update, delete: if request.auth != null && isSystemAdmin();
    }
    // No broad fallback rule by default for better security.
    // Add explicit rules for any other collections.
  }
}

    